stages:
  - lint
  - build
  - deploy

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

backend_linting:
  image: gradle:7.4.2-jdk17-alpine
  stage: lint
  script:
    - gradle check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle

frontend_linting:
  image: node:18.14.2-alpine3.17
  stage: lint
  script:
    - npm install
    - npx eslint .
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - dist
      - node_modules

backend_build:
  image: gradle:7.4.2-jdk17-alpine
  stage: build
  script:
    - gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

frontend_build:
  image: node:18.14.2-alpine3.17
  stage: build
  script:
    - npm install
    - npm run build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - dist
      - node_modules

backend_image_build:
  stage: build
  image: docker:18.09
  services:
    - docker:18.09-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:backend
  environment:
    SPRING_PROFILES_ACTIVE=data-gen
    DATA_INIT_LOCATION=classpath:DataInit.json
    FILE_STORAGE_LOCATION=/sportgh/WEB-INF/classes/image-storage/uploaded-images
    TEST_FILE_STORAGE_LOCATION=/sportgh/WEB-INF/classes/image-storage/test-images/
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f Dockerfile-backend -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  tags:
    - docker-image
#  only:
#    - develop

frontend_image_build:
  stage: build
  image: docker:18.09
  services:
    - docker:18.09-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:frontend
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f Dockerfile-frontend -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  tags:
    - docker-image
#  only:
#    - develop
